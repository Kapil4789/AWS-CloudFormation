# A YAML format primarily uses three node types: 
# 1. document
# 2. scalar values
# 3. sequence values
# 4. mapping values (also called hash values)
# 
# The YAML format is designed to be human-readable and human-editable.
# 
# The document node represents the entire YAML document, which can contain multiple scalar values, sequence values, and mapping values.
# 
# The scalar values represent string, integer, float, boolean, and null values.
# 
# The sequence values represent ordered lists of values, which can be of any type (scalar, sequence, or mapping).
# 
# The mapping values represent unordered key-value pairs, where the keys are strings and the values can be of any type (scalar, sequence, or mapping).
# 
# The YAML format is designed to be compatible with other programming languages, including Python, Java, and C#. It is also designed to be easily readable and editable, making it a popular choice for configuration files and data interchange.

# A YAML format primarily uses three node types:
# 1. document
# 2. scalar values
# 3. sequence values
# 4. mapping values (also called hash values)

# document
---
# 1. scalar values
# 2. sequence values
# 3. mapping values (also called hash values)

# scalar values
string: "Hello, World!"
integer: 42
float: 3.14
boolean: true
null: null

# sequence values
sequence:
  - item1
  - item2
  - item3

# mapping values
mapping:
  key1: value1
  key2: value2
  key3: value3

Maps/Dictionaries (YAML calls it mapping)
---
# Maps/Dictionaries (YAML calls it mapping)
The content of a mapping node is an unordered set of key/value node pairs, with the restriction that each of the keys is unique. YAML places no further restrictions on the nodes.
--- 
# Example of a mapping node in YAML
mapping:
  key1: value1
  key2: value2
  key3: value3

Arrays/Lists (YAML calls them sequences)
---
# Arrays/Lists (YAML calls them sequences)
The content of a sequence node is an ordered list of nodes. YAML places no further restrictions on the nodes.

The content of a sequence node is an ordered series of zero or more nodes. In particular, a sequence may contain the same node more than once. It could even contain itself.
--- 
# Example of a sequence node in YAML
sequence:
  - item1
  - item2
  - item3

Literals (Strings, numbers, boolean, etc.)
---
# Literals (Strings, numbers, boolean, etc.)
The content of a scalar node is an opaque datum that can be presented as a series of zero or more Unicode characters.

YAML provides a few literal node types for representing scalar values. These are:
- string
- integer
- float
- boolean
- null

# key: value [mapping]
Company: IDEXCEL

# Key: value in a array[sequence]
domain:
 - devops
 - devsecops


turorial:
  - yaml:
      name: "hello world" #string [literal]
      age: 22 #string [literal]
      address: "india"  #string [literal]
  - json:
      name: "hello world" #string [literal]
      age: 22 #string [literal]
      address: "india"  #string [literal]
  - xml:
      name: Extensible Markup Language #string [literal]
      age: 1986 #string [literal]
      address: "USA"  #string [literal]
  
author: omkarbirade
published: true


1. Indentation
A YAML file relies on whitespace and indentation to indicate nesting. Notice the hierarchy and nesting is visible through a Python-like indentation style. 
It is critical to note that tab characters cannot be used for indentation in YAML files; 
only spaces can be used. The number of spaces used for indentation doesn’t matter as long as they are consistent.

tutorial:
  - kapil:
      name: "Hello Kapil Prajapati"
      city: "Mehsana"
      pincode: 384002
  - vijay:
      name: "Hello Vijay Prajapati"
      city: "USA"
      pincode: 123456
  - omkar:
      name: "Hello Omkar Prajapati"
      city: "Mehsana"
      pincode: 384002


2. Mapping

Mappings are used to associate key/value pairs that are unordered. Maps in YAML files can be nested by increasing the indentation, 
or new maps can be created at the same level by resolving the previous one.


name: "Kapil Prajapati"
city: Mehsana
pincode: 384002

3. Sequences
A sequence is an ordered list of nodes. In YAML, sequences can be nested by increasing the indentation, or new sequences can be created at the same level by resolving the previous one.

- item1
- item2
- item3

Sequences in YAML are represented by using the hyphen (-) and space. They are ordered and can be embedded inside a map using indentation.

language:
  - YAML
  - php
  - ruby
  - perl
  - python
  - java
  - c++

Tip: Remember that the order matters with sequences but not with mappings.

4. Literals-Strings

String literals in YAML do not need to be quoted. It is only important to quote them when they contain a value that can be mistaken for a special character.

Here is an example where the string has to be quoted as & is a special character.

message1: YAML & JSON
message2: "YAML & JSON"

Folding Strings

Strings can also be written in blocks and be interpreted without the new line characters using the fold operator (greater than).

message: >
  kapil Prajapati
  Mehsana
  384002
  Gujarat
  India

The above YAML snippet is interpreted as in the output below.

message: "kapil Prajapati Mehsana 384002 Gujarat India"

Block strings

Strings can be interpreted as blocks using the block (pipe) character.

message: |
  kapil Prajapati
  Mehsana
  384002
  Gujarat
  India

This is interpreted with the new lines (\n) as below.

message: kapil Prajapati
  Mehsana
  384002
  Gujarat
  India

Chomp characters

Chomp characters are used to remove the new line characters from the end of a scalar string.

message:  >+
  This block line
  Will be interpreted as a single
  line with a newline character at the 
  end

The above snippet is interpreted as below in JSON


{
  "message": "This block line Will be interpreted as a single line with a newline character at the  end\n"
}


Stripping new line character

message: >-
 This block line
 Will be interpreted as a single
 line without the newline character at the
 end


The above snippet is interpreted as below in JSON.

{
  "message": "This block line Will be interpreted as a single line without the newline character at the end"
}


5. Comments 

Unlike JSON, the YAML file supports comments, which start with #. To learn more, see – how to add comments in YAML.

# Author : Kapil Prajapati
Name: Kapil Prajapati
























  